#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Created on Thu May 24 10:16:31 2018

@author: wanggb
"""

#%%加载用到的Python库
import sys
import os
import pandas as pd
import numpy as np
from time import clock
from datetime import timedelta
import warnings
warnings.filterwarnings("ignore")

#%%自己编写的函数库
path = "P:\\投资部\\小程序\\景顺长城基金评价小程序"
# path = "D:\\景顺胡晓露\\基金评价小程序"
path = "D:\\1，课题研究\\20181213 基金评价\\景顺长城基金评价小程序"
sys.path.append(path)  
os.chdir(path)
#path = r"D:\work\python project\py3\keti\jingshunfund\huxiaolu\for1"
#os.chdir(path)
from Functions import *
#连接Wind的函数库
from WindPy import w
status=w.start()
if status.ErrorCode!=0:
    input('Wind接口连接错误，退出程序')
    raise ValueError('WindPy接口插件连接失败')
#%%设置输出文件的名称
global outputfile
outputfile='结果文件.xlsx'

#%%
###开始处理数据
if __name__=="__main__":
    t0=clock()
    try:
        ###读取输入参数
        print("Step1:读取参数文件  ###累积耗时%.2f" % (clock()-t0))
        args = GetArgs(FileName = "参数文件.xlsx")
        WeightForOneYear = pd.read_excel("参数文件.xlsx",sheet_name = "1年业绩打分权重",index_col = 0)
        WeightForTwoYear = pd.read_excel("参数文件.xlsx",sheet_name = "2年业绩打分权重",index_col = 0)
        WeightForThreeYear = pd.read_excel("参数文件.xlsx",sheet_name = "3年业绩打分权重",index_col = 0)
        WeightForFiveYear = pd.read_excel("参数文件.xlsx",sheet_name = "5年业绩打分权重",index_col = 0)
        WeightForOneAndThreeYear = pd.read_excel("参数文件.xlsx",sheet_name = "综合打分权重1",index_col = 0)
        WeightForOneAndFiveYear = pd.read_excel("参数文件.xlsx",sheet_name = "综合打分权重2",index_col = 0)
        WeightForAnalysis = pd.read_excel("参数文件.xlsx",sheet_name = "被动指数基金筛选的打分权重",index_col = 0)
        print("Step1:读取参数文件结束  ###累积耗时%.2f" % (clock()-t0))
        ###基金描述
        fund_basic=get_fund_basic(fund_list = args['fund_list']) # 不含基准
        new_list=list(args['fund_list'])
        new_list.insert(0,args['basecode'])
        fund_basic1=get_fund_basic(new_list) #含基准
        fund_desc=fund_basic1[['基金名称']]

        ###获取基金净值
        print("Step2:读取基金净值数据  ###累积耗时%.2f" % (clock()-t0))
        fund_nv=get_fund_netvalue(fund_list = args['fund_list'],startdt = args['startdate'],enddt = args['enddate'],Update = True)
        print("Step2:读取基金净值数据结束  ###累积耗时%.2f" % (clock()-t0))
        
        ###需要调用的参数
        drawdowndt=args['drawdowndate']
        anamon=args['analysismonth']
        start=args['startdate']
        end=args['enddate']
        SpreadYears = args['spreadyears']
        baseval=args['basevalue']
        bscode=args['basecode']
        rf=args['riskfree']
        mrate=args['minrate']
        sp_date=args['specialdate']
        ###此处需要更改基准的起始时间，若基准通过Wind下载，则在下载时已经依据start和end下载。否则需要调整
        if bscode=="自定义基准":
            baseval.index=pd.to_datetime(baseval.index)
            #baseval=baseval.resample('BM').last()
            bv1=baseval[baseval.index>=start]
            bv2=bv1[bv1.index<=end]
            baseval=bv2
        nv=fund_nv.copy()
        nv[args['basecode']]=args['basevalue']           # 添加基准及基金简称
        nv=nv[[args['basecode']]+list(fund_basic.index)] # 将基准置前
        nv.columns.name = "index"
        NetValueD = nv
        NetValueM = NetValueD.resample('BM').last()
        ReturnD = get_return_rate(NetValueD)
        ReturnM = get_return_rate(NetValueM)
        nv2 = NetValueM
        fnv = ReturnM
        fnvForYearlyAlpha = NetValueM.pct_change()   

        ###输出文件
        writer=pd.ExcelWriter(outputfile,engine='xlsxwriter',datetime_format='yyyy-mm-dd')
        wb=writer.book

        ###格式定义
        bold_fmt=wb.add_format({'bold':True,'align':'left'})
        num_fmt=wb.add_format({'num_format':'0.0000','align':'center'})
        num_fmt1=wb.add_format({'num_format':'0.00','align':'center'})   
        num_fmt2=wb.add_format({'num_format':'0','align':'center'})   
        pct_fmt=wb.add_format({'num_format':'0.00%','align':'center'})
        date_fmt=wb.add_format({'num_format':'yyyy-mm-dd','align':'right'})
        
        '''
        Sheet 0: 基金概况：基金代码、基金名称、成立日期、基金规模
        '''
        ###生成工作表
        print("Step3:生成基金概况表格  ###累积耗时%.2f" % (clock()-t0))
        fund_basic.to_excel(writer,sheet_name='基金概况',float_format='%.2f',startrow=0,startcol=0)
        sh0=writer.sheets['基金概况']
        
        ###设置列宽
        nc=fund_basic.shape[1]
        sh0.set_column(0,nc,15,wb.add_format({'align':'center'}))
        sh0.set_column(1,1,25,wb.add_format({'align':'center'}))
        sh0.set_column(2,2,15,date_fmt)    
        sh0.set_column(nc+1,nc+1,3)
        sh0.set_column(nc+2,nc+3,15)

        ###设置基础参数
        sh0.write(1,nc+2,'开始时间:',bold_fmt)
        sh0.write(1,nc+3,args['startdate'],date_fmt)
        sh0.write(2,nc+2,'结束时间:',bold_fmt)
        sh0.write(2,nc+3,args['enddate'],date_fmt)
        sh0.write(3,nc+2,'无风险利率:',bold_fmt)
        sh0.write(3,nc+3,args['riskfree'],pct_fmt)
        sh0.write(4,nc+2,'比较基准:',bold_fmt)
        sh0.write(4,nc+3,args['basecode'],wb.add_format({'align':'right'}))

        '''
        Sheet 1: 年度数据：基金代码、年度收益率、年度波动率
        '''
        # 生成工作表
        ##收益
        print("Step4:生成年度数据表格  ###累积耗时%.2f" % (clock()-t0))
        y_ret = year_return(fund_data = nv2)
        y_ext = exreturn3(y_ret,args['basecode'])
        y_ret_rank = Transfer1(TheData = y_ret,TheIndex = False)
        y_ret = Transfer2(TheData = y_ret)
        
        ##超额
        #y_ext = exreturn0(year_return2(fund_data=nv2),bscode)
        y_ext_rank = Transfer1(TheData=y_ext, TheIndex=False)
        y_ext = Transfer2(TheData=y_ext)
    
        ##波动
        #y_vol = year_vol(fund_data = fnv)
        y_vol = year_vol2(fund_data = fnv)
        y_vol_rank = Transfer1(TheData = y_vol,TheIndex = True)
        y_vol = Transfer2(TheData = y_vol)
        
        ##跟踪误差
        #y_err = year_tracking_error(exreturn2(fnv, bscode))
        y_err = year_tracking_error2(exreturn2(fnv, bscode))
        y_err_rank = Transfer1(TheData=y_err, TheIndex=True)
        y_err = Transfer2(TheData=y_err)
        
        #下行波动率
        y_dwann_vol = year_down_vol(fnv, mrate,start,end)
        y_dwann_vol_rank = Transfer1(TheData=y_dwann_vol, TheIndex=True)
        y_dwann_vol = Transfer2(TheData=y_dwann_vol)
        
        summary_index = ['count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max']
        tmp = pd.DataFrame(list(summary_index), index=summary_index, columns=fund_desc.columns)
        fund_desc1 = pd.concat([tmp, fund_desc], axis=0)
        year_desc = pd.concat([fund_desc1, y_ret,y_ext,  y_vol,y_err,y_dwann_vol, y_ret_rank,y_ext_rank, y_vol_rank,y_err_rank,y_dwann_vol_rank],
                          keys=['', '年度收益率','年度超额收益率', '年度波动率','年度跟踪误差','年度下行波动率','年度收益率排序', '年度超额收益率排序','年度波动率排序','年度跟踪误差排序','年度下行波动率排序'], axis=1)
        year_desc.index.name = '基金代码'
        year_desc.to_excel(writer, sheet_name='年度数据', float_format='%.4f', startrow=0, startcol=0)
        sh1 = writer.sheets['年度数据']

        # 设置列宽
        nc1=year_desc.shape[1]
        sh1.set_column(0,nc1,15,wb.add_format({'align':'center'}))
        sh1.set_column(1,1,25,wb.add_format({'align':'center'}))
        sh1.set_column(2,1 + y_ret.shape[1] + y_ext.shape[1] + y_vol.shape[1] + y_err.shape[1] + y_dwann_vol.shape[1] , 15, pct_fmt)
        
        '''
        Sheet 2: 历史业绩数据：基金代码、年化收益率、年化超额收益率、年化波动率、相对基准的跟踪误差、年化下行波动率
        '''
        # 生成工作表
        print("Step5:生成历史业绩数据表格  ###累积耗时%.2f" % (clock()-t0))
        ann_ret=ann_return(fund_data = NetValueD,start = start,end = end)
        ext=exreturn1(ann_ret,bscode,start,end,0)
        
        ann_ret_rank = Transfer1(TheData = ann_ret,TheIndex = False)
        ann_ret = Transfer2(TheData = ann_ret)
        
        ext_rank = Transfer1(TheData = ext,TheIndex = False)
        ext = Transfer2(TheData = ext)
        
        ann_vo=ann_vol(fnv,start,end)
        ann_vo_rank = Transfer1(TheData = ann_vo,TheIndex = True)
        ann_vo = Transfer2(TheData = ann_vo)
        
        t_err=tracking_error(exreturn2(fnv,bscode),start,end)
        t_err_rank = Transfer1(TheData = t_err,TheIndex = True)
        t_err = Transfer2(TheData = t_err)
        
        dwann_vol=annual_down_vol(fnv,mrate,start,end)
        dwann_vol_rank = Transfer1(TheData = dwann_vol,TheIndex = True)
        dwann_vol = Transfer2(TheData = dwann_vol)
        
        hist_desc=pd.concat([fund_desc1,ann_ret,ext,ann_vo,t_err,dwann_vol,ann_ret_rank,ext_rank,ann_vo_rank,t_err_rank,dwann_vol_rank],keys=['','年化收益率','年化超额收益率','年化波动率','年化跟踪误差','年化下行波动率','年化收益率排序','年化超额收益率排序','年化波动率排序','年化跟踪误差排序','年化下行波动率排序'],axis=1)
        hist_desc.index.name='基金代码'   
        hist_desc.to_excel(writer,sheet_name='历史业绩数据',float_format='%.4f',startrow=0,startcol=0)
        sh2=writer.sheets['历史业绩数据']
        
        # 设置列宽
        nc2=hist_desc.shape[1]
        sh2.set_column(0,nc2,20,wb.add_format({'align':'center'}))
        sh2.set_column(0,0,15,wb.add_format({'align':'center'}))
        sh2.set_column(1,1,25,wb.add_format({'align':'center'}))
        sh2.set_column(2,1 + ann_ret.shape[1] + ext.shape[1] + ann_vo.shape[1] + t_err.shape[1] + dwann_vol.shape[1],20,pct_fmt)
        sh2.set_column(2 + ann_ret.shape[1] + ext.shape[1] + ann_vo.shape[1] + t_err.shape[1] + dwann_vol.shape[1],nc2,20,wb.add_format({'align':'center'}))
        #sh2.set_column(len(ann_ret.columns)+2,len(ann_ret.columns)+len(ext.columns)+1,20,pct_fmt)

        '''
        Sheet 3: 2年历史滚动业绩数据：基金代码、2年年化收益率、2年年化超额收益率、2年年化波动率、2年年化跟踪误差、2年年化下行波动率
        '''
        # 生成工作表
        if SpreadYears>= 2:  
            print("Step6:生成2年历史滚动业绩数据表格  ###累积耗时%.2f" % (clock()-t0))
            dann_ret=double_ann_return(nv2,start,end)
            dext=exreturn1(dann_ret,bscode,start,end,1)
            dann_ret_rank = Transfer1(TheData = dann_ret,TheIndex = False)
            dann_ret = Transfer2(TheData = dann_ret)
            dext_rank = Transfer1(TheData = dext,TheIndex = False)
            dext = Transfer2(TheData = dext)
            dann_vol=double_ann_vol(fnv,start,end)
            dann_vol_rank = Transfer1(TheData = dann_vol,TheIndex = True)
            dann_vol = Transfer2(TheData = dann_vol)
            dt_err=doubletracking_error(exreturn2(fnv,bscode),start,end)
            dt_err_rank = Transfer1(TheData = dt_err,TheIndex = True)
            dt_err = Transfer2(TheData = dt_err)
            ddwann_vol=doubleannual_down_vol(fnv,mrate,start,end)
            ddwann_vol_rank = Transfer1(TheData = ddwann_vol,TheIndex = True)
            ddwann_vol = Transfer2(TheData = ddwann_vol)
            dhist_desc = pd.concat([fund_desc1,dann_ret,dext,dann_vol,dt_err,ddwann_vol,dann_ret_rank,dext_rank,dann_vol_rank,dt_err_rank,ddwann_vol_rank],keys=['','2年年化收益率','2年年化超额收益率','2年年化波动率','2年年化跟踪误差','2年年化下行波动率','2年年化收益率排序','2年年化超额收益率排序','2年年化波动率排序','2年年化跟踪误差排序','2年年化下行波动率排序'],axis=1)
            dhist_desc.index.name='基金代码'
            dhist_desc.to_excel(writer,sheet_name='2年历史滚动业绩数据',float_format='%.4f',startrow=0,startcol=0)
            sh3=writer.sheets['2年历史滚动业绩数据']
            # 设置列宽
            nc3=dhist_desc.shape[1]
            sh3.set_column(0,nc3,30,wb.add_format({'align':'center'}))
            sh3.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh3.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh3.set_column(2,1 + dann_ret.shape[1] + dext.shape[1] + dann_vol.shape[1] + dt_err.shape[1] + ddwann_vol.shape[1] ,30,pct_fmt)
            sh3.set_column(2 + dann_ret.shape[1] + dext.shape[1] + dann_vol.shape[1] + dt_err.shape[1] + ddwann_vol.shape[1] ,nc3 ,30,wb.add_format({'align':'center'}))
        else:
            print("考察期不足2年")   
        '''
        Sheet 4：3年历史滚动业绩数据：基金代码、3年年化收益率、3年年化超额收益率、3年年化波动率、3年年化跟踪误差、3年年化下行波动率
        '''
        # 生成工作表
        if SpreadYears >= 3:
            print("Step7:生成3年历史滚动业绩数据表格  ###累积耗时%.2f" % (clock()-t0))
            tann_ret=triple_ann_return(nv2,start,end)
            text=exreturn1(tann_ret,bscode,start,end,2)
            tann_ret_rank = Transfer1(TheData = tann_ret,TheIndex = False)
            tann_ret = Transfer2(TheData = tann_ret)
            text_rank = Transfer1(TheData = text,TheIndex = False)
            text = Transfer2(TheData = text)
            tann_vol=triple_ann_vol(fnv,start,end)
            tann_vol_rank = Transfer1(TheData = tann_vol,TheIndex = True)
            tann_vol = Transfer2(TheData = tann_vol)
            tt_err=tripletracking_error(exreturn2(fnv,bscode),start,end)
            tt_err_rank = Transfer1(TheData = tt_err,TheIndex = True)
            tt_err = Transfer2(TheData = tt_err)
            tdwann_vol=tripleannual_down_vol(fnv,mrate,start,end)
            tdwann_vol_rank = Transfer1(TheData = tdwann_vol,TheIndex = True)
            tdwann_vol = Transfer2(TheData = tdwann_vol)
            thist_desc=pd.concat([fund_desc1,tann_ret,text,tann_vol,tt_err,tdwann_vol,tann_ret_rank,text_rank,tann_vol_rank,tt_err_rank,tdwann_vol_rank],keys=['','3年年化收益率','3年年化超额收益率','3年年化波动率','3年年化跟踪误差','3年年化下行波动率','3年年化收益率排序','3年年化超额收益率排序','3年年化波动率排序','3年年化跟踪误差排序','3年年化下行波动率排序'],axis=1)
            thist_desc.index.name='基金代码'
            thist_desc.to_excel(writer,sheet_name='3年历史滚动业绩数据',float_format='%.4f',startrow=0,startcol=0)
            sh4=writer.sheets['3年历史滚动业绩数据']
            # 设置列宽
            nc4=thist_desc.shape[1]
            sh4.set_column(0,nc4,30,wb.add_format({'align':'center'}))
            sh4.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh4.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh4.set_column(2,1 + tann_ret.shape[1] + text.shape[1] + tann_vol.shape[1] + tt_err.shape[1] + tdwann_vol.shape[1],30,pct_fmt)
            sh4.set_column(2 + tann_ret.shape[1] + text.shape[1] + tann_vol.shape[1] + tt_err.shape[1] + tdwann_vol.shape[1],nc4,30,wb.add_format({'align':'center'}))
        else:
            print("考察期不足3年")
        '''
        Sheet 5：alpha：Jensen's Alpha（相对基准）、beta
        '''
        # 生成工作表
        print("Step8:生成alpha beta表格  ###累积耗时%.2f" % (clock()-t0))
        alpha,beta=alphabet_cal(fnv,rf)
        alpha_rank = Transfer1(TheData = alpha,TheIndex = False)
        alpha = Transfer2(TheData = alpha)   
        beta_rank = Transfer1(TheData = beta,TheIndex = True)
        beta = Transfer2(TheData = beta)
        alpha_beta1 = pd.concat([alpha,beta],axis=1)
        alpha_beta1_rank = pd.concat([alpha_rank,beta_rank],axis=1)
        alpha_yearly,beta_yearly=alphabet_cal_yearly(fnvForYearlyAlpha,rf)
        alpha_yearly_rank = Transfer1(TheData = alpha_yearly,TheIndex = False)
        alpha_yearly = Transfer2(TheData = alpha_yearly)
        beta_yearly_rank = Transfer1(TheData = beta_yearly,TheIndex = True)
        beta_yearly = Transfer2(TheData = beta_yearly)
        alpha_beta2 = pd.concat([alpha_yearly,beta_yearly],axis=1)
        alpha_beta2_rank = pd.concat([alpha_yearly_rank,beta_yearly_rank],axis=1)
        alpha_rollyear,beta_rollyear=alphabet_cal_rollyear(fnv,rf,end,start)
        alpha_rollyear_rank = Transfer1(TheData = alpha_rollyear,TheIndex = False)
        alpha_rollyear = Transfer2(TheData = alpha_rollyear)
        beta_rollyear_rank = Transfer1(TheData = beta_rollyear,TheIndex = True)
        beta_rollyear = Transfer2(TheData = beta_rollyear)
        alpha_beta3 = pd.concat([alpha_rollyear,beta_rollyear],axis=1)
        alpha_beta3_rank = pd.concat([alpha_rollyear_rank,beta_rollyear_rank],axis=1)
        alpha_beta=pd.concat([fund_desc1,alpha_beta1,alpha_beta2,alpha_beta3,alpha_beta1_rank,alpha_beta2_rank,alpha_beta3_rank],keys = ['','全区间','分年度','历史年份Alpha和Beta','全区间排序','分年度排序','历史年份Alpha和Beta排序'],axis=1)
        alpha_beta.index.name='基金代码'
        alpha_beta['历史年份Alpha和Beta']
        alpha_beta.to_excel(writer,sheet_name='ALPHA BETA',float_format='%.4f',startrow=0,startcol=0)
        sh5=writer.sheets['ALPHA BETA']
        # 设置列宽
        nc5=alpha_beta.shape[1]
        sh5.set_column(0,nc5,15,wb.add_format({'align':'center'}))
        sh5.set_column(0,0,15,wb.add_format({'align':'center'}))
        sh5.set_column(1,1,25,wb.add_format({'align':'center'}))
        sh5.set_column(2,1 + alpha_beta1.shape[1] + alpha_beta2.shape[1] + alpha_beta3.shape[1],15,num_fmt1)
        sh5.set_column(2 + alpha_beta1.shape[1] + alpha_beta2.shape[1] + alpha_beta3.shape[1],nc5,15,wb.add_format({'align':'center'}))
        '''
        Sheet 6：drawdown：基金代码、过去i年最大回撤 过去i年最大回撤出现的波谷日期  过去i年回撤的持续时间
        过去i年连续跌的月度数、过去i年连续跌的月度区间内的收益率%、过去i年业绩净值最低点（日期）、过去i年里，现在相对最低点已经恢复的收益%        '''
        # 生成工作表
        print("Step9:生成drawdown表格  ###累积耗时%.2f" % (clock()-t0))
        drawback,drawdate,durtime,dur_ret,lowestdate,res_ret = drawdown(NetValueM,drawdowndt,start,end)
        drawback_day = DrawDownD(NetValueD,drawdowndt,start,end)
        drawback_day_rank = Transfer1(TheData = drawback_day,TheIndex = False)
        drawback_day = Transfer2(TheData = drawback_day)
        drawback_rank = Transfer1(TheData = drawback,TheIndex = False)
        drawback = Transfer2(TheData = drawback)
        drawdate_rank = Transfer1(TheData = drawdate,TheIndex = False)
        drawdate = Transfer3(TheData = drawdate)
        durtime_rank = Transfer1(TheData = durtime,TheIndex = True)
        durtime = Transfer2(TheData = durtime)
        dur_ret_rank = Transfer1(TheData = dur_ret,TheIndex = False)
        dur_ret = Transfer2(TheData = dur_ret)
        #lowestdate_rank = Transfer1(TheData = lowestdate,TheIndex = False)
        lowestdate = Transfer3(TheData = lowestdate)
        res_ret_rank = Transfer1(TheData = res_ret,TheIndex = False)
        res_ret = Transfer2(TheData = res_ret)
        drawdown_desc=pd.concat([fund_desc1,drawback_day,drawback,drawdate,durtime,dur_ret,lowestdate,res_ret,drawback_day_rank,drawback_rank,drawdate_rank,durtime_rank,dur_ret_rank,res_ret_rank],keys=['','日频最大回撤','月频最大回撤','最大回撤波谷日期','回撤持续月度数','连续下跌月度区间内的收益率','净值最低点日期','现在相对最低点已经恢复的收益率','日频最大回撤排序','月频最大回撤排序','最大回撤波谷日期排序','回撤持续月度数排序','连续下跌月度区间内的收益率排序','现在相对最低点已经恢复的收益率排序'],axis=1)
        drawdown_desc.index.name='基金代码'
        drawdown_desc.to_excel(writer,sheet_name='历史回撤',float_format='%.4f',startrow=0,startcol=0)
        sh6=writer.sheets['历史回撤']
        
        # 设置列宽
        nc6=drawdown_desc.shape[1]
        sh6.set_column(0,nc6,15,wb.add_format({'align':'center'}))
        sh6.set_column(1,1,25,wb.add_format({'align':'center'}))
        sh6.set_column(2,len(drawback.columns)*2+1,15,pct_fmt)
        sh6.set_column(14,16,15,pct_fmt)
        sh6.set_column(20,22,15,pct_fmt)
        '''
        Sheet 7：年度比率：年度夏普比率、年度滚动信息比率
        '''
        # 生成工作表
        print("Step10:生成年度比率表格  ###累积耗时%.2f" % (clock() - t0))
        y_ret_s = year_return2(fund_data=nv2)
        ##超额
        y_ext_d = exreturn0(year_return2(fund_data=nv2), bscode)
        ##波动
        y_vol_s = year_vol2(fund_data=fnv)
        ##跟踪误差
        y_err_d = year_tracking_error2(exreturn2(fnv, bscode))
        year_sharpe = (y_ret_s - rf) / y_vol_s
        year_sharpe_rank = Transfer1(TheData=year_sharpe, TheIndex=False)
        year_sharpe = Transfer2(TheData=year_sharpe)

        year_dir = y_ext_d / y_err_d
        year_dir_rank = Transfer1(TheData=year_dir, TheIndex=False)
        year_dir = Transfer2(TheData=year_dir)

        year_desc2 = pd.concat([fund_desc1, year_sharpe, year_dir, year_sharpe_rank, year_dir_rank],
                               keys=['', '年度滚动夏普比率', '年度滚动信息比率', '年度滚动夏普比率排序', '年度滚动信息比率排序'], axis=1,
                               join_axes=[fund_desc1.index])
        year_desc2.index.name = '基金代码'
        year_desc2.to_excel(writer, sheet_name='年度比率', float_format='%.4f', startrow=0, startcol=0)
        sh7 = writer.sheets['年度比率']

        # 设置列宽
        nc7 = year_desc2.shape[1]
        sh7.set_column(0, 0, 15, wb.add_format({'align': 'center'}))
        sh7.set_column(1, 1, 25, wb.add_format({'align': 'center'}))
        sh7.set_column(2,1 + year_sharpe.shape[1] + year_dir.shape[1] ,15,num_fmt1)
        sh7.set_column(2 + year_sharpe.shape[1] + year_dir.shape[1] ,nc7,15,wb.add_format({'align':'center'}))
        
        '''
        Sheet 8：1年比率：1年夏普比率、1年滚动信息比率
        '''
        # 生成工作表
        if SpreadYears>=1:
            print("Step11:生成1年比率表格  ###累积耗时%.2f" % (clock() - t0))
            oann_ret = one_ann_return(nv2, start, end)
            oext = exreturn1(fund_data = oann_ret, basecode = bscode, start = start, end = end, flag = 3)
            oann_vol = one_ann_vol(fnv, start, end)
            ot_err = onetracking_error(exreturn2(fnv, bscode), start, end)
            osharpe = sharpe_ratio(oann_ret, rf, oann_vol, start, end, 2)
            osharpe_rank = Transfer1(TheData=osharpe, TheIndex=False)
            osharpe = Transfer2(TheData=osharpe)
            odir = info_rate(oext, ot_err, start, end, 2)
            odir_rank = Transfer1(TheData=odir, TheIndex=False)
            odir = Transfer2(TheData=odir)
            odir_desc = pd.concat([fund_desc1, osharpe, odir, osharpe_rank, odir_rank],
                                  keys=['', '1年滚动夏普比率', '1年滚动信息比率', '1年滚动夏普比率排序', '1年滚动信息比率排序'], axis=1)
            odir_desc.index.name = '基金代码'
            odir_desc.to_excel(writer, sheet_name='1年比率', float_format='%.4f', startrow=0, startcol=0)
            sh8 = writer.sheets['1年比率']
            # 设置列宽
            nc8 = odir_desc.shape[1]
            sh8.set_column(0, 0, 15, wb.add_format({'align': 'center'}))
            sh8.set_column(1, 1, 25, wb.add_format({'align': 'center'}))
            sh8.set_column(2,1 + osharpe.shape[1] + odir.shape[1] ,25,num_fmt1)
            sh8.set_column(2 + osharpe.shape[1] + odir.shape[1] ,nc8,25,wb.add_format({'align':'center'}))
        else:
            print("考察期不足1年")
        '''
        Sheet 9：2年比率：2年夏普比率、2年滚动信息比率
        '''
        # 生成工作表
        if SpreadYears>=2:
            print("Step12:生成2年比率表格  ###累积耗时%.2f" % (clock()-t0))
            dann_ret=double_ann_return(nv2,start,end)
            dext=exreturn1(dann_ret,bscode,start,end,1)
            dann_vol=double_ann_vol(fnv,start,end)
            dt_err=doubletracking_error(exreturn2(fnv,bscode),start,end)
            dsharpe=sharpe_ratio(dann_ret,rf,dann_vol,start,end,0)
            dsharpe_rank = Transfer1(TheData = dsharpe,TheIndex = False)
            dsharpe = Transfer2(TheData = dsharpe)
            ddir=info_rate(dext,dt_err,start,end,0)
            ddir_rank = Transfer1(TheData = ddir,TheIndex = False)
            ddir = Transfer2(TheData = ddir)
            dir_desc=pd.concat([fund_desc1,dsharpe,ddir,dsharpe_rank,ddir_rank],keys=['','2年滚动夏普比率','2年滚动信息比率','2年滚动夏普比率排序','2年滚动信息比率排序'],axis=1)
            dir_desc.index.name='基金代码'
            dir_desc.to_excel(writer,sheet_name='2年比率',float_format='%.4f',startrow=0,startcol=0)
            sh9=writer.sheets['2年比率']
            # 设置列宽
            nc9=dir_desc.shape[1]
            sh9.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh9.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh9.set_column(2,1 + dsharpe.shape[1] + ddir.shape[1] ,25,num_fmt1)
            sh9.set_column(2 + dsharpe.shape[1] + ddir.shape[1] ,nc9,25,wb.add_format({'align':'center'}))
        else:
            print("考察期不足2年")
        '''
        Sheet 10：3年比率：3年夏普比率、3年滚动信息比率
        '''
        # 生成工作表
        if SpreadYears>=3:
            print("Step13:生成3年比率表格  ###累积耗时%.2f" % (clock()-t0))
            tann_ret=triple_ann_return(nv2,start,end)
            text=exreturn1(tann_ret,bscode,start,end,2)
            tann_vol=triple_ann_vol(fnv,start,end)
            tt_err=tripletracking_error(exreturn2(fnv,bscode),start,end)
            tsharpe=sharpe_ratio(tann_ret,rf,tann_vol,start,end,1)
            tsharpe_rank = Transfer1(TheData = tsharpe,TheIndex = False)
            tsharpe = Transfer2(TheData = tsharpe)
            tir=info_rate(text,tt_err,start,end,1)
            tir_rank = Transfer1(TheData = tir,TheIndex = False)
            tir = Transfer2(TheData = tir)
            tir_desc=pd.concat([fund_desc1,tsharpe,tir,tsharpe_rank,tir_rank],keys=['','3年滚动夏普比率','3年滚动信息比率','3年滚动夏普比率排序','3年滚动信息比率排序'],axis=1)
            tir_desc.index.name='基金代码'
            tir_desc.to_excel(writer,sheet_name='3年比率',float_format='%.4f',startrow=0,startcol=0)
            sh10=writer.sheets['3年比率']
            # 设置列宽
            nc10=tir_desc.shape[1]
            sh10.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh10.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh10.set_column(2,1 + tsharpe.shape[1] + tir.shape[1],25,num_fmt1)
            sh10.set_column(2 + tsharpe.shape[1] + tir.shape[1],nc10,25,wb.add_format({'align':'center'}))
        else:
            print("考察期不足3年")
        '''
        Sheet 11：正负分析：
            基准>0：月度数、基准大于0的月度，基金的平均收益率、基准大于0的月度，基准的平均收益率、基准大于0的月度里，基金业绩>0的月度数、基准大于0的月度里，基金业绩>基准业绩的月度数 
            基准<0：月度数、基准小于0的月度，基金的平均收益率、基准小于0的月度，基准的平均收益率、基准小于0的月度里，基金业绩>0的月度数、基准小于0的月度里，基金业绩>基准业绩的月度数 
        '''
         # 生成工作表
        print("Step14:生成正负分析表格  ###累积耗时%.2f" % (clock()-t0))
        ple,pnmean,pmon1,pmon2=pos_ana(fnv,anamon,end,bscode)
        ple_rank = Transfer1(TheData = ple,TheIndex = False)
        ple = Transfer2(TheData = ple)
        pnmean_rank = Transfer1(TheData = pnmean,TheIndex = False)
        pnmean = Transfer2(TheData = pnmean)
        pmon1_rank = Transfer1(TheData = pmon1,TheIndex = False)
        pmon1 = Transfer2(TheData = pmon1)
        pmon2_rank = Transfer1(TheData = pmon2,TheIndex = False)
        pmon2 = Transfer2(TheData = pmon2)
        pos_desc=pd.concat([ple,pnmean,pmon1,pmon2],axis=1)   
        pos_desc_rank=pd.concat([ple_rank,pnmean_rank,pmon1_rank,pmon2_rank],axis=1)   
        nle,nnmean,nmon1,nmon2=neg_ana(fnv,anamon,end,bscode)
        nle_rank = Transfer1(TheData = nle,TheIndex = False)
        nle = Transfer2(TheData = nle)
        nnmean_rank = Transfer1(TheData = nnmean,TheIndex = False)
        nnmean = Transfer2(TheData = nnmean)
        nmon1_rank = Transfer1(TheData = nmon1,TheIndex = False)
        nmon1 = Transfer2(TheData = nmon1)
        nmon2_rank = Transfer1(TheData = nmon2,TheIndex = False)
        nmon2 = Transfer2(TheData = nmon2)
        neg_desc=pd.concat([nle,nnmean,nmon1,nmon2],axis=1)
        neg_desc_rank=pd.concat([nle_rank,nnmean_rank,nmon1_rank,nmon2_rank],axis=1)
        ana_desc=pd.concat([fund_desc1,pos_desc,neg_desc,pos_desc_rank,neg_desc_rank],keys=['','基准>0的情况','基准<0的情况','基准>0的情况排序','基准<0的情况排序'],axis=1)
        ana_desc.index.name='基金代码'
        ana_desc.to_excel(writer,sheet_name='正负分析',float_format='%.4f',startrow=0,startcol=0)
        sh11=writer.sheets['正负分析']
        # 设置列宽
        nc11=ana_desc.shape[1]
        sh11.set_column(0,nc11,40,wb.add_format({'align':'center'}))
        sh11.set_column(0,0,15,wb.add_format({'align':'center'}))
        sh11.set_column(1,1,25,wb.add_format({'align':'center'}))
        sh11.set_column(2,2,20,wb.add_format({'align':'center'}))
        sh11.set_column(3,3,33,pct_fmt)
        sh11.set_column(4,4,41,wb.add_format({'align':'center'}))
        sh11.set_column(5,5,48,wb.add_format({'align':'center'}))
        sh11.set_column(6,6,20,wb.add_format({'align':'center'}))
        sh11.set_column(7,7,33,pct_fmt)
        sh11.set_column(8,8,41,wb.add_format({'align':'center'}))
        sh11.set_column(9,9,48,wb.add_format({'align':'center'}))    
        sh11.set_column(10,nc11,40,wb.add_format({'align':'center'}))    

        '''
        Sheet 12：特殊时期分析
        '''
        # 生成工作表
        print("Step15:生成特殊时期分析表格  ###累积耗时%.2f" % (clock()-t0))
        #spe_ret1 = spe_cal_nh(sp_date,NetValueD,250)
        spe_ret2 = spe_cal(sp_date,NetValueD)
        spe_ret2_rank = Transfer1(TheData = spe_ret2,TheIndex = False)
        spe_ret2 = Transfer2(TheData = spe_ret2)
        #pdb.set_trace()  # 
        spe_desc=pd.concat([fund_desc1,spe_ret2,spe_ret2_rank],keys=['','特殊时期收益','特殊时期收益排序'],axis=1)
        spe_desc.index.name='特殊时期收益'
        spe_desc.to_excel(writer,sheet_name='特殊时期分析',float_format='%.4f',startrow=0,startcol=0)
        sh12=writer.sheets['特殊时期分析']
        # 设置列宽
        nc12=spe_desc.shape[1]
        sh12.set_column(0,0,15,wb.add_format({'align':'center'}))
        sh12.set_column(1,1,25,wb.add_format({'align':'center'}))
        sh12.set_column(2,1 + spe_ret2.shape[1],20,pct_fmt)
        sh12.set_column(2 + spe_ret2.shape[1],nc12,20,wb.add_format({'align':'center'}))
        '''
        Sheet 13 : 1年业绩打分
        '''
        ###
        print("Step16:scoring 1Y 表格  ###累积耗时%.2f" % (clock()-t0))
        if SpreadYears>=1:
            ###基本信息
            FundBasicInfo = fund_basic[["基金名称","成立日期","最新规模(亿)"]]
            ###1年年化收益率
            Rule1ForOneYear = pd.DataFrame(ann_ret["1年年化收益率"])
            ###1年年化波动率
            Rule2ForOneYear = pd.DataFrame(ann_vo["1年年化波动率"])
            ###1年年化下行波动率
            Rule3ForOneYear = pd.DataFrame(dwann_vol["1年年化下行波动率"])
            ###过去1年最大回撤
            Rule4ForOneYear = pd.DataFrame(drawback["过去1年最大回撤"])
            ###数据合并
            RuleForOneYear = pd.merge(Rule1ForOneYear,Rule2ForOneYear,how = "inner",left_index = True,right_index = True)
            RuleForOneYear = pd.merge(RuleForOneYear,Rule3ForOneYear,how = "inner",left_index = True,right_index = True)
            RuleForOneYear = pd.merge(RuleForOneYear,Rule4ForOneYear,how = "inner",left_index = True,right_index = True)
            RuleForOneYear = RuleForOneYear.loc[FundBasicInfo.index,]
            ###数据计算
            ZScoreForOneYear = RuleForOneYear.apply(lambda x:(x-x.median())/x.std())
            ZScoreForOneYear2 = ZScoreForOneYear * WeightForOneYear.loc["方向"]
            RankingForOneYear=pd.DataFrame()
            RankingForOneYear["1年年化收益率"]=ZScoreForOneYear2["1年年化收益率"].rank(ascending=False)
            RankingForOneYear["1年年化波动率"]=ZScoreForOneYear2["1年年化波动率"].rank(ascending=False)
            RankingForOneYear["1年年化下行波动率"]=ZScoreForOneYear2["1年年化下行波动率"].rank(ascending=False)
            RankingForOneYear["过去1年最大回撤"]=ZScoreForOneYear2["过去1年最大回撤"].rank(ascending=False)
#            RankingForOneYear = ZScoreForOneYear2.rank(ascending=False) #升序排列,忽略缺失值
            TotalScoreForOneYear = RankingForOneYear.apply(lambda x:(x*WeightForOneYear.loc["权重"]).sum() ,axis = 1)
            TotalScoreForOneYear2 = TotalScoreForOneYear.rank(ascending = True)
            TotalScoreForOneYear = pd.DataFrame(TotalScoreForOneYear,columns = ["总分"])
            TotalScoreForOneYear2 = pd.DataFrame(TotalScoreForOneYear2,columns = ["排名加权"])
#            修改这里
            Scoring1Y=pd.concat([FundBasicInfo,RuleForOneYear,RankingForOneYear,TotalScoreForOneYear,TotalScoreForOneYear2],keys = ["基本信息","原始值","Ranking","总分","加权排名"],axis = 1)
#            Scoring1Y = pd.concat([FundBasicInfo,RuleForOneYear,ZScoreForOneYear,RankingForOneYear,TotalScoreForOneYear,TotalScoreForOneYear2],keys = ["基本信息","原始值","ZScore","Ranking","总分","加权排名"],axis = 1)
            Scoring1Y.to_excel(writer,sheet_name='scoring 1Y',float_format='%.4f',startrow=0,startcol=0)
            sh13 = writer.sheets['scoring 1Y']
            # 设置列宽
            nc13=Scoring1Y.shape[1]
            sh13.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh13.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh13.set_column(2,2,15,wb.add_format({'align':'center'}))
            sh13.set_column(3,3,15,num_fmt1)
            sh13.set_column(4,7,20,pct_fmt)
#            sh13.set_column(8,11,20,num_fmt1)
            sh13.set_column(8,11,20,num_fmt2)
            sh13.set_column(12,12,20,num_fmt1)
            sh13.set_column(13,13,20,num_fmt2)
        else:
            print("考察期不足1年--无法计算1年的业绩打分")
        '''
        Sheet 13 : 2年业绩打分
        '''
        ###
        print("Step16:scoring 2Y 表格  ###累积耗时%.2f" % (clock()-t0))
        if SpreadYears>=2:
            ###基本信息
            FundBasicInfo = fund_basic[["基金名称","成立日期","最新规模(亿)"]]
            ###2年年化收益率
            Rule1ForTwoYear = pd.DataFrame(ann_ret["2年年化收益率"])
            ###2年年化波动率
            Rule2ForTwoYear = pd.DataFrame(ann_vo["2年年化波动率"])
            ###2年年化下行波动率
            Rule3ForTwoYear = pd.DataFrame(dwann_vol["2年年化下行波动率"])
            ###过去2年最大回撤
            Rule4ForTwoYear = pd.DataFrame(drawback["过去2年最大回撤"])
            ###数据合并
            RuleForTwoYear = pd.merge(Rule1ForTwoYear,Rule2ForTwoYear,how = "inner",left_index = True,right_index = True)
            RuleForTwoYear = pd.merge(RuleForTwoYear,Rule3ForTwoYear,how = "inner",left_index = True,right_index = True)
            RuleForTwoYear = pd.merge(RuleForTwoYear,Rule4ForTwoYear,how = "inner",left_index = True,right_index = True)
            RuleForTwoYear = RuleForTwoYear.loc[FundBasicInfo.index,]
            ###数据计算
            ZScoreForTwoYear = RuleForTwoYear.apply(lambda x:(x-x.median())/x.std())
            ZScoreForTwoYear2 = ZScoreForTwoYear * WeightForTwoYear.loc["方向"]
#            修改这里
#            RankingForTwoYear = ZScoreForTwoYear2.rank() #升序排列,忽略缺失值
            RankingForTwoYear=pd.DataFrame()
            RankingForTwoYear["2年年化收益率"]=ZScoreForTwoYear2["2年年化收益率"].rank(ascending=False)
            RankingForTwoYear["2年年化波动率"]=ZScoreForTwoYear2["2年年化波动率"].rank(ascending=False)
            RankingForTwoYear["2年年化下行波动率"]=ZScoreForTwoYear2["2年年化下行波动率"].rank(ascending=False)
            RankingForTwoYear["过去2年最大回撤"]=ZScoreForTwoYear2["过去2年最大回撤"].rank(ascending=False)               
            TotalScoreForTwoYear = RankingForTwoYear.apply(lambda x:(x*WeightForTwoYear.loc["权重"]).sum() ,axis = 1)
            TotalScoreForTwoYear2 = TotalScoreForTwoYear.rank(ascending = True)
            TotalScoreForTwoYear = pd.DataFrame(TotalScoreForTwoYear,columns = ["总分"])
            TotalScoreForTwoYear2 = pd.DataFrame(TotalScoreForTwoYear2,columns = ["排名加权"])
#            Scoring2Y = pd.concat([FundBasicInfo,RuleForTwoYear,ZScoreForTwoYear,RankingForTwoYear,TotalScoreForTwoYear,TotalScoreForTwoYear2],keys = ["基本信息","原始值","ZScore","Ranking","总分","加权排名"],axis = 1)
            Scoring2Y = pd.concat([FundBasicInfo,RuleForTwoYear,RankingForTwoYear,TotalScoreForTwoYear,TotalScoreForTwoYear2],keys = ["基本信息","原始值","Ranking","总分","加权排名"],axis = 1)
            Scoring2Y.to_excel(writer,sheet_name='scoring 2Y',float_format='%.4f',startrow=0,startcol=0)
            sh13_2 = writer.sheets['scoring 2Y']
            # 设置列宽
            nc13_2 =Scoring2Y.shape[1]
            sh13_2.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh13_2.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh13_2.set_column(2,2,15,wb.add_format({'align':'center'}))
            sh13_2.set_column(3,3,15,num_fmt1)
            sh13_2.set_column(4,7,20,pct_fmt)
#            sh13_2.set_column(8,11,20,num_fmt1)
            sh13_2.set_column(8,11,20,num_fmt2)
            sh13_2.set_column(12,12,20,num_fmt1)
            sh13_2.set_column(13,13,20,num_fmt2)
        else:
            print("考察期不足1年--无法计算2年的业绩打分")
        '''
        Sheet 14 : 3年业绩打分
        '''
        print("Step17:scoring 3Y 表格  ###累积耗时%.2f" % (clock()-t0))
        ###
        if SpreadYears>=3:
            ###基本信息
            FundBasicInfo = fund_basic[["基金名称","成立日期","最新规模(亿)"]]
            ###3年年化收益率
            Rule1ForThreeYear = pd.DataFrame(ann_ret["3年年化收益率"])
            ###3年年化波动率
            Rule2ForThreeYear = pd.DataFrame(ann_vo["3年年化波动率"])
            ###3年年化下行波动率
            Rule3ForThreeYear = pd.DataFrame(dwann_vol["3年年化下行波动率"])
            ###过去3年最大回撤
            Rule4ForThreeYear = pd.DataFrame(drawback["过去3年最大回撤"])
            ###数据合并
            RuleForThreeYear = pd.merge(Rule1ForThreeYear,Rule2ForThreeYear,how = "inner",left_index = True,right_index = True)
            RuleForThreeYear = pd.merge(RuleForThreeYear,Rule3ForThreeYear,how = "inner",left_index = True,right_index = True)
            RuleForThreeYear = pd.merge(RuleForThreeYear,Rule4ForThreeYear,how = "inner",left_index = True,right_index = True)
            RuleForThreeYear = RuleForThreeYear.loc[FundBasicInfo.index,]
            ###数据计算
            ZScoreForThreeYear = RuleForThreeYear.apply(lambda x:(x-x.median())/x.std())
            ZScoreForThreeYear2 = ZScoreForThreeYear * WeightForThreeYear.loc["方向"]
#            修改这里
#            RankingForThreeYear = ZScoreForThreeYear2.rank()
            RankingForThreeYear=pd.DataFrame()
            RankingForThreeYear["3年年化收益率"]=ZScoreForThreeYear2["3年年化收益率"].rank(ascending=False)
            RankingForThreeYear["3年年化波动率"]=ZScoreForThreeYear2["3年年化波动率"].rank(ascending=False)
            RankingForThreeYear["3年年化下行波动率"]=ZScoreForThreeYear2["3年年化下行波动率"].rank(ascending=False)
            RankingForThreeYear["过去3年最大回撤"]=ZScoreForThreeYear2["过去3年最大回撤"].rank(ascending=False)
            TotalScoreForThreeYear = RankingForThreeYear.apply(lambda x:(x*WeightForThreeYear.loc["权重"]).sum() ,axis = 1)
            TotalScoreForThreeYear2 = TotalScoreForThreeYear.rank(ascending = True)
            TotalScoreForThreeYear = pd.DataFrame(TotalScoreForThreeYear,columns = ["总分"])
            TotalScoreForThreeYear2 = pd.DataFrame(TotalScoreForThreeYear2,columns = ["加权排名"])
#            Scoring3Y = pd.concat([FundBasicInfo,RuleForThreeYear,ZScoreForThreeYear,RankingForThreeYear,TotalScoreForThreeYear,TotalScoreForThreeYear2],keys = ["基本信息","原始值","ZScore","Ranking","总分","排名加权"],axis = 1)
            Scoring3Y = pd.concat([FundBasicInfo,RuleForThreeYear,RankingForThreeYear,TotalScoreForThreeYear,TotalScoreForThreeYear2],keys = ["基本信息","原始值","Ranking","总分","排名加权"],axis = 1)
            #Scoring1Y = pd.merge(FundBasicInfo,Scoring1Y,how = "inner",left_index = True,right_index = True)
            Scoring3Y.to_excel(writer,sheet_name='scoring 3Y',float_format='%.4f',startrow=0,startcol=0)
            sh14 = writer.sheets['scoring 3Y']
            # 设置列宽
            nc14=Scoring3Y.shape[1]
            sh14.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh14.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh14.set_column(2,2,15,wb.add_format({'align':'center'}))
            sh14.set_column(3,3,15,num_fmt1)
            sh14.set_column(4,7,20,pct_fmt)
#            sh14.set_column(8,11,20,num_fmt1)
            sh14.set_column(8,11,20,num_fmt2)
            sh14.set_column(12,12,20,num_fmt1)
            sh14.set_column(13,13,20,num_fmt2)
        else:
            print("考察期不足3年--无法计算3年的业绩打分")
        '''
        Sheet 15 : 5年业绩打分
        '''
        print("Step17:scoring 5Y 表格  ###累积耗时%.2f" % (clock()-t0))
        ###
        if SpreadYears>=5:
            ###基本信息
            FundBasicInfo = fund_basic[["基金名称","成立日期","最新规模(亿)"]]
            ###5年年化收益率
            Rule1ForThreeYear = pd.DataFrame(ann_ret["5年年化收益率"])
            ###5年年化波动率
            Rule2ForThreeYear = pd.DataFrame(ann_vo["5年年化波动率"])
            ###5年年化下行波动率
            Rule3ForThreeYear = pd.DataFrame(dwann_vol["5年年化下行波动率"])
            ###过去5年最大回撤
            Rule4ForThreeYear = pd.DataFrame(drawback["过去5年最大回撤"])
            ###数据合并
            RuleForThreeYear = pd.merge(Rule1ForThreeYear,Rule2ForThreeYear,how = "inner",left_index = True,right_index = True)
            RuleForThreeYear = pd.merge(RuleForThreeYear,Rule3ForThreeYear,how = "inner",left_index = True,right_index = True)
            RuleForThreeYear = pd.merge(RuleForThreeYear,Rule4ForThreeYear,how = "inner",left_index = True,right_index = True)
            RuleForThreeYear = RuleForThreeYear.loc[FundBasicInfo.index,]
            ###数据计算
            ZScoreForThreeYear = RuleForThreeYear.apply(lambda x:(x-x.median())/x.std())
            ZScoreForThreeYear2 = ZScoreForThreeYear * WeightForFiveYear.loc["方向"]
#            RankingForThreeYear = ZScoreForThreeYear2.rank()
            RankingForThreeYear=pd.DataFrame()
            RankingForThreeYear["5年年化收益率"]=ZScoreForThreeYear2["5年年化收益率"].rank(ascending=False)
            RankingForThreeYear["5年年化波动率"]=ZScoreForThreeYear2["5年年化波动率"].rank(ascending=False)
            RankingForThreeYear["5年年化下行波动率"]=ZScoreForThreeYear2["5年年化下行波动率"].rank(ascending=False)
            RankingForThreeYear["过去5年最大回撤"]=ZScoreForThreeYear2["过去5年最大回撤"].rank(ascending=False)            
            TotalScoreForThreeYear = RankingForThreeYear.apply(lambda x:(x*WeightForFiveYear.loc["权重"]).sum() ,axis = 1)
            TotalScoreForThreeYear2 = TotalScoreForThreeYear.rank(ascending = True)
            TotalScoreForThreeYear = pd.DataFrame(TotalScoreForThreeYear,columns = ["总分"])
            TotalScoreForThreeYear2 = pd.DataFrame(TotalScoreForThreeYear2,columns = ["加权排名"])
#            Scoring5Y = pd.concat([FundBasicInfo,RuleForThreeYear,ZScoreForThreeYear,RankingForThreeYear,TotalScoreForThreeYear,TotalScoreForThreeYear2],keys = ["基本信息","原始值","ZScore","Ranking","总分","排名加权"],axis = 1)
            Scoring5Y = pd.concat([FundBasicInfo,RuleForThreeYear,RankingForThreeYear,TotalScoreForThreeYear,TotalScoreForThreeYear2],keys = ["基本信息","原始值","Ranking","总分","排名加权"],axis = 1)
            #Scoring1Y = pd.merge(FundBasicInfo,Scoring1Y,how = "inner",left_index = True,right_index = True)
            Scoring5Y.to_excel(writer,sheet_name='scoring 5Y',float_format='%.4f',startrow=0,startcol=0)
            sh14_1 = writer.sheets['scoring 5Y']
            # 设置列宽
            nc14_1=Scoring5Y.shape[1]
            sh14_1.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh14_1.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh14_1.set_column(2,2,15,wb.add_format({'align':'center'}))
            sh14_1.set_column(3,3,15,num_fmt1)
            sh14_1.set_column(4,7,20,pct_fmt)
#            sh14_1.set_column(8,11,20,num_fmt1)
            sh14_1.set_column(8,11,20,num_fmt2)
            sh14_1.set_column(12,12,20,num_fmt1)
            sh14_1.set_column(13,13,20,num_fmt2)
        else:
            print("考察期不足5年--无法计算5年的业绩打分")
        '''
        Sheet 15 : 1年、2年和3年的综合打分
        '''
        ###
        print("Step18:scoring 表格  ###累积耗时%.2f" % (clock()-t0))
        if SpreadYears >= 3:
            FundBasicInfo = fund_basic[["基金名称","成立日期","最新规模(亿)"]]
            ###1年年化收益率
            Rule1 = pd.DataFrame(ann_ret["1年年化收益率"])
            ###2年年化收益率
            Rule2 = pd.DataFrame(ann_ret["2年年化收益率"])
            ###3年年化收益率
            Rule3 = pd.DataFrame(ann_ret["3年年化收益率"])  
            ###3年年化波动率
            Rule4 = pd.DataFrame(ann_vo["3年年化波动率"])
            ###3年年化下行波动率
            Rule5 = pd.DataFrame(dwann_vol["3年年化下行波动率"])
            ###过去3年最大回撤
            Rule6 = pd.DataFrame(drawback["过去3年最大回撤"])
            ###数据合并
            Rule = pd.merge(Rule1,Rule2,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule3,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule4,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule5,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule6,how = "inner",left_index = True,right_index = True)
            Rule = Rule.loc[FundBasicInfo.index,]
            ###数据计算
            ZScore = Rule.apply(lambda x:(x-x.median())/x.std())
            ZScore2 = ZScore * WeightForOneAndThreeYear.loc["方向"]
#            Ranking = ZScore2.rank()
#            修改这里
            Ranking=pd.DataFrame()
            Ranking["1年年化收益率"]=ZScore2["1年年化收益率"].rank(ascending=False)
            Ranking["2年年化收益率"]=ZScore2["2年年化收益率"].rank(ascending=False)
            Ranking["3年年化收益率"]=ZScore2["3年年化收益率"].rank(ascending=False)
            Ranking["3年年化波动率"]=ZScore2["3年年化波动率"].rank(ascending=False)
            Ranking["3年年化下行波动率"]=ZScore2["3年年化下行波动率"].rank(ascending=False)
            Ranking["过去3年最大回撤"]=ZScore2["过去3年最大回撤"].rank(ascending=False)
            TotalScore = Ranking.apply(lambda x:(x*WeightForOneAndThreeYear.loc["权重"]).sum() ,axis = 1)
            TotalScore2 = TotalScore.rank(ascending = True)
            TotalScore = pd.DataFrame(TotalScore,columns = ["总分"])
            TotalScore2 = pd.DataFrame(TotalScore2,columns = ["排名加权"])
#            修改这里
#            Scoring = pd.concat([FundBasicInfo,Rule,ZScore,Ranking,TotalScore,TotalScore2],keys = ["基本信息","原始值","ZScore","Ranking","总分","排名加权"],axis = 1)
            Scoring = pd.concat([FundBasicInfo,Rule,Ranking,TotalScore,TotalScore2],keys = ["基本信息","原始值","Ranking","总分","排名加权"],axis = 1)
            #Scoring = pd.merge(FundBasicInfo,Scoring,how = "inner",left_index = True,right_index = True)
            Scoring.to_excel(writer,sheet_name='SummaryScoring1',float_format='%.4f',startrow=0,startcol=0)
            sh15 = writer.sheets['SummaryScoring1']
            # 设置列宽
            nc15=Scoring.shape[1]
            sh15.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh15.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh15.set_column(2,2,15,wb.add_format({'align':'center'}))
            sh15.set_column(3,3,15,num_fmt1)
            sh15.set_column(4,9,20,pct_fmt)
#            sh15.set_column(10,15,20,num_fmt1)      
            sh15.set_column(10,15,20,num_fmt2)      
            sh15.set_column(16,16,20,num_fmt1)  
            sh15.set_column(17,17,20,num_fmt2)  
        else:
            print("考察期不足3年--无法计算1年、2年、3年的综合打分") 
        '''
        Sheet 16 : 1年、3年和5年的综合打分
        '''
        ###
        print("Step18:scoring 表格  ###累积耗时%.2f" % (clock()-t0))
        if SpreadYears >= 5:
            FundBasicInfo = fund_basic[["基金名称","成立日期","最新规模(亿)"]]
            ###1年年化收益率
            Rule1 = pd.DataFrame(ann_ret["1年年化收益率"])
            ###2年年化收益率
            Rule2 = pd.DataFrame(ann_ret["3年年化收益率"])
            ###3年年化收益率
            Rule3 = pd.DataFrame(ann_ret["5年年化收益率"])  
            ###3年年化波动率
            Rule4 = pd.DataFrame(ann_vo["5年年化波动率"])
            ###3年年化下行波动率
            Rule5 = pd.DataFrame(dwann_vol["5年年化下行波动率"])
            ###过去3年最大回撤
            Rule6 = pd.DataFrame(drawback["过去5年最大回撤"])
            ###数据合并
            Rule = pd.merge(Rule1,Rule2,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule3,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule4,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule5,how = "inner",left_index = True,right_index = True)
            Rule = pd.merge(Rule,Rule6,how = "inner",left_index = True,right_index = True)
            Rule = Rule.loc[FundBasicInfo.index,]
            ###数据计算
            ZScore = Rule.apply(lambda x:(x-x.median())/x.std())
            ZScore2 = ZScore * WeightForOneAndFiveYear.loc["方向"]
#            Ranking = ZScore2.rank()
            Ranking=pd.DataFrame()
            Ranking["1年年化收益率"]=ZScore2["1年年化收益率"].ranking(ascending=False)
            Ranking["3年年化收益率"]=ZScore2["3年年化收益率"].ranking(ascending=False)
            Ranking["5年年化收益率"]=ZScore2["5年年化收益率"].ranking(ascending=False)
            Ranking["5年年化波动率"]=ZScore2["5年年化波动率"].ranking(ascending=False)
            Ranking["5年年化下行波动率"]=ZScore2["5年年化下行波动率"].ranking(ascending=False)
            Ranking["过去5年最大回撤"]=ZScore2["过去5年最大回撤"].ranking(ascending=False)
            TotalScore = Ranking.apply(lambda x:(x*WeightForOneAndFiveYear.loc["权重"]).sum() ,axis = 1)
            TotalScore2 = TotalScore.rank(ascending = True)
            TotalScore = pd.DataFrame(TotalScore,columns = ["总分"])
            TotalScore2 = pd.DataFrame(TotalScore2,columns = ["排名加权"])
#            Scoring2 = pd.concat([FundBasicInfo,Rule,ZScore,Ranking,TotalScore,TotalScore2],keys = ["基本信息","原始值","ZScore","Ranking","总分","排名加权"],axis = 1)
            Scoring2 = pd.concat([FundBasicInfo,Rule,Ranking,TotalScore,TotalScore2],keys = ["基本信息","原始值","Ranking","总分","排名加权"],axis = 1)
            #Scoring = pd.merge(FundBasicInfo,Scoring,how = "inner",left_index = True,right_index = True)
            Scoring2.to_excel(writer,sheet_name='SummaryScoring2',float_format='%.4f',startrow=0,startcol=0)
            sh15_2 = writer.sheets['SummaryScoring2']
            # 设置列宽
            nc15_2=Scoring2.shape[1]
            sh15_2.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh15_2.set_column(1,1,25,wb.add_format({'align':'center'}))
            sh15_2.set_column(2,2,15,wb.add_format({'align':'center'}))
            sh15_2.set_column(3,3,15,num_fmt1)
            sh15_2.set_column(4,9,20,pct_fmt)
#            sh15_2.set_column(10,15,20,num_fmt1)      
            sh15_2.set_column(10,15,20,num_fmt2)      
            sh15_2.set_column(16,16,20,num_fmt1)  
            sh15_2.set_column(17,17,20,num_fmt2)  
        else:
            print("考察期不足3年--无法计算1年、3年、5年的综合打分") 
        '''
        Sheet 16 : 打分汇总
        '''
        ###
        print("Step19:summary 表格  ###累积耗时%.2f" % (clock()-t0))
        if SpreadYears >= 3:
            FundBasicInfo = fund_basic
            TotalScoreForOneYearLast = TotalScoreForOneYear2.copy()
            TotalScoreForOneYearLast.columns = ["CASE1"]
            TotalScoreForTwoYearLast = pd.DataFrame(TotalScoreForTwoYear2)
            TotalScoreForTwoYearLast.columns = ["CASE2"]
            TotalScoreForThreeYearLast = pd.DataFrame(TotalScoreForThreeYear2)
            TotalScoreForThreeYearLast.columns = ["CASE3"]
            TotalScoreLast = TotalScore2.copy()
            TotalScoreLast.columns = ["CASE4"]
            SummaryResult = pd.merge(FundBasicInfo,TotalScoreForOneYearLast,how = "inner",left_index = True,right_index = True)
            SummaryResult = pd.merge(SummaryResult,TotalScoreForTwoYearLast,how = "inner",left_index = True,right_index = True)
            SummaryResult = pd.merge(SummaryResult,TotalScoreForThreeYearLast,how = "inner",left_index = True,right_index = True)
            SummaryResult = pd.merge(SummaryResult,TotalScoreLast,how = "inner",left_index = True,right_index = True)
            # SummaryResult["AVERAGE"] = (SummaryResult.CASE1 + SummaryResult.CASE2 + SummaryResult.CASE3)/3
            SummaryResult.to_excel(writer,sheet_name='summary',float_format='%.4f',startrow=0,startcol=0)
            sh16 = writer.sheets['summary']
            # 设置列宽
            nc16=SummaryResult.shape[1]
            sh16.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh16.set_column(1,2,25,wb.add_format({'align':'center'}))
            sh16.set_column(3,4,15,wb.add_format({'align':'center'}))
            sh16.set_column(5,5,15,num_fmt1)
            sh16.set_column(6,nc16,15,num_fmt1)
            sh16.set_column(7,nc16,15,num_fmt2) 
        '''
        Sheet 18 : 被动指数基金评价模板2
        '''
        print("Step21:被动指数基金评价模板 表格  ###累积耗时%.2f" % (clock()-t0))
        IsIndexFund = args["IsIndexFund"]
        if IsIndexFund == "是" and SpreadYears >=3:
            IndexFunds=get_fund_basic2(fund_list = args['fund_list']) # 不含基准
            IndexFunds.index.name = "基金代码"
            ###年化超额收益
            Rule1 = ext[["1年年化超额收益率","2年年化超额收益率","3年年化超额收益率"]]
            ###年化跟踪误差
            Rule2 = t_err[["1年年化跟踪误差","2年年化跟踪误差","3年年化跟踪误差"]]
            ###计算
            ###原始值
            result = pd.merge(Rule1,Rule2,how = "inner",left_index = True,right_index = True)
            result = result.loc[FundBasicInfo.index,]
            ###排序
            Rule2_2 = Rule2*(-1)
            result2 = pd.merge(Rule1,Rule2_2,how = "inner",left_index = True,right_index = True)
            result2 = result2.loc[FundBasicInfo.index,]
#修改这里            
#            result_rank = result2.rank()
            result_rank=pd.DataFrame()
            result_rank["1年年化超额收益率"]=result2["1年年化超额收益率"].rank(ascending=False)
            result_rank["2年年化超额收益率"]=result2["2年年化超额收益率"].rank(ascending=False)
            result_rank["3年年化超额收益率"]=result2["3年年化超额收益率"].rank(ascending=False)
            result_rank["1年年化跟踪误差"]=result2["1年年化跟踪误差"].rank(ascending=True)
            result_rank["2年年化跟踪误差"]=result2["2年年化跟踪误差"].rank(ascending=True)
            result_rank["3年年化跟踪误差"]=result2["3年年化跟踪误差"].rank(ascending=True)
            Summary = pd.DataFrame(columns = ["短期情景","中期情景","长期情景","综合情景"])
            Summary["短期情景"] = result_rank.apply(lambda x:np.sum(x*WeightForAnalysis.loc["短期情景"]*WeightForAnalysis.loc["方向"]),axis =1)
            Summary["中期情景"] = result_rank.apply(lambda x:np.sum(x*WeightForAnalysis.loc["中期情景"]*WeightForAnalysis.loc["方向"]),axis =1)
            Summary["长期情景"] = result_rank.apply(lambda x:np.sum(x*WeightForAnalysis.loc["长期情景"]*WeightForAnalysis.loc["方向"]),axis =1)
            Summary["综合情景"] = result_rank.apply(lambda x:np.sum(x*WeightForAnalysis.loc["综合情景"]*WeightForAnalysis.loc["方向"]),axis =1)
            Summary_rank = Summary.rank()
            ###
            FinalResult = pd.concat([IndexFunds,result,result_rank,Summary,Summary_rank],axis = 1,keys = ["基本信息","评价指标","评价指标排序","得分","得分排序"])
            FinalResult.to_excel(writer,sheet_name='被动指数基金评价模板',float_format='%.4f',startrow=0,startcol=0)
            sh17 = writer.sheets['被动指数基金评价模板']
            # 设置列宽
            nc17=FinalResult.shape[1]
            sh17.set_column(0,0,15,wb.add_format({'align':'center'}))
            sh17.set_column(1,1,25)
            sh17.set_column(2,5,15)
            sh17.set_column(6,6,15,num_fmt1)
            sh17.set_column(7,7,15,pct_fmt)
            sh17.set_column(8,10,15)
            sh17.set_column(8,13,20,pct_fmt)
            sh17.set_column(14,nc17,20,num_fmt1)        
        else:
            print("无法获取 被动指数基金评价模板")                  
        '''
        保存文件
        '''
        wb.close()
        input('\n计算完成. 用时%.2f秒.' % (clock()-t0))
    except Exception as e:
        print('\n错误:')
        print(e)
        input('\n如有疑问请发邮件至wanggb@igwfmc.com.')
        #input('\n如有疑问请电话东方证券王星星,18621295777.')
